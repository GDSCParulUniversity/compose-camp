package journey.started.meditation_composecamp.ui.theme

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.GridCells
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.LazyVerticalGrid
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Icon
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import journey.started.meditation_composecamp.BottomBarItemProperties
import journey.started.meditation_composecamp.GridProperties
import journey.started.meditation_composecamp.R
import java.util.*

@Composable
fun HomeScreen () {
    Box(modifier = Modifier
        .fillMaxSize()
        .background(DeepBlue)) {
        Column {
            GreetingSection(name = GreetingUpdate())

            ChipSection(chips = mutableListOf<String>("Sound Sleep", "Insomnia", "Depression", "Aashiqui") )
            ThirdSection()
            FourthSection()
            FifthSection(properties = listOf(
                GridProperties(
                    title = "Sleep Meditation",
                    icon = R.drawable.ic_music,
                    squareColor = BlueViolet2
                ), GridProperties(
                    title = "Tips for Sleeping",
                    icon = R.drawable.ic_videocam,
                    squareColor = LightGreen2
                ), GridProperties(
                    title = "Night Island",
                    icon = R.drawable.ic_moon,
                    squareColor = OrangeYellow3
                ), GridProperties(
                    title = "Calming Sounds",
                    icon = R.drawable.ic_headphone,
                    squareColor = Beige2
                ), GridProperties(
                    title = "Morning Prayer",
                    icon = R.drawable.ic_music,
                    squareColor = skyblue
                ), GridProperties(
                    title = "Focus Zone",
                    icon = R.drawable.ic_headphone,
                    squareColor = skyred
                )
            ))

        }
        BottomBar(list = listOf(
            BottomBarItemProperties("Home", R.drawable.ic_home ),
            BottomBarItemProperties("Meditation", R.drawable.ic_bubble),
            BottomBarItemProperties("Sleep", R.drawable.ic_moon),
            BottomBarItemProperties("Music", R.drawable.ic_music),
            BottomBarItemProperties("Profile", R.drawable.ic_profile)
        ), modi = Modifier.align(Alignment.BottomCenter))
    }

}

@Composable
fun GreetingSection(name: String) {
    Row(
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier
            .fillMaxWidth()
            .padding(15.dp)
    ){

        Column(verticalArrangement = Arrangement.Center) {
            Text(text = "Good $name, Vaibhav", color = TextWhite,
            style = MaterialTheme.typography.h5)
            Text(text = "We wish you a good day!", color = TextWhite,
            style = MaterialTheme.typography.body1)
        }
        Icon(painter = painterResource(id = R.drawable.ic_search), contentDescription ="search",
        tint = Color.White,
        modifier = Modifier.size(24.dp))
    }
}
@Composable
fun ChipSection(chips: List<String>) {

    var selectedChipIndex by remember {
        mutableStateOf(0)
    }
    LazyRow{
        items(chips.size) {
            Box(
                modifier = Modifier
                    .padding(start = 16.dp, top = 16.dp, bottom = 16.dp, end = 4.dp)
                    .clickable {
                        selectedChipIndex = it
                    }
                    .clip(RoundedCornerShape(10.dp))
                    .background(
                        if (selectedChipIndex == it) ButtonBlue
                        else DarkerButtonBlue
                    )
                    .padding(15.dp)
                ) {
                Text(text = chips[it])
            }
        }
}
}



@Composable
fun ThirdSection() {
    Row(
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
            .clip(RoundedCornerShape(15.dp))
            .background(LightRed)
            .padding(15.dp)
    ){

        Column(verticalArrangement = Arrangement.Center) {
            Text(text = "Daily Thought", color = TextWhite,
                style = MaterialTheme.typography.h5)
            Text(text = "Meditation 3 - 10 min", color = TextWhite,
                style = MaterialTheme.typography.body1)
        }
        Box(modifier = Modifier
            .clip(CircleShape)
            .background(ButtonBlue)
            .size(40.dp).clickable {  }
            ,
            contentAlignment = Alignment.Center
        // we use content alignment for box
            ){
            Icon(painter = painterResource(id = R.drawable.ic_play), contentDescription ="search",
                tint = Color.White,
                modifier = Modifier.size(16.dp))
        }

    }
}
@Composable
fun FourthSection(){
    Box(contentAlignment = Alignment.CenterStart,
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(10.dp))
            .padding(16.dp)
        ){
        Text(text = "Featured", color = TextWhite,
            style = MaterialTheme.typography.h5 )
    }
}
@OptIn(ExperimentalFoundationApi::class)
@Composable
fun FifthSection(properties: List<GridProperties>){
    LazyVerticalGrid(cells = GridCells.Fixed(2),
        contentPadding = PaddingValues(start = 8.dp, end = 8.dp, bottom = 100.dp),
    modifier = Modifier.fillMaxHeight()) {
        items(properties.size) {
            SquareContents( values = properties[it])
        }
    }

}
@Composable
fun SquareContents(values: GridProperties) {
    BoxWithConstraints(modifier = Modifier
        .padding(8.dp)
        .aspectRatio(1f)
        .clip(RoundedCornerShape(10.dp))
        .background(values.squareColor)
    ) {

        Box(modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)) {
            Text(text = values.title, style = MaterialTheme.typography.h6,
                color = TextWhite,
                lineHeight = 26.sp, modifier = Modifier.align(Alignment.TopStart)
            )
            Icon(painter = painterResource(id = values.icon),
                contentDescription = "Music",
                modifier = Modifier.align(Alignment.BottomStart),
                tint = TextWhite
            )
            Text(text = "Start",
                fontSize = 14.sp,
                color = TextWhite,
                fontWeight = FontWeight.Bold,
                modifier = Modifier
                    .clickable {

                    }
                    .align(Alignment.BottomEnd)
                    .clip(RoundedCornerShape(10.dp))
                    .background(ButtonBlue)
                    .padding(horizontal = 15.dp, vertical = 6.dp)
            )
            
        }
    }
}
@Composable
fun BottomBar(list: List<BottomBarItemProperties>,
              modi: Modifier = Modifier,

              //initialSelectIndex: Int = 0
){
    var selectedMenuIndex by remember {
        mutableStateOf(0)
    }
    Row(
        horizontalArrangement = Arrangement.SpaceAround,
        verticalAlignment = Alignment.CenterVertically,

        modifier = modi
            .fillMaxWidth().background(DeepBlue)
            .padding(top = 16.dp, bottom = 16.dp)
    ) {
        list.forEachIndexed {
                index, item ->
            BottomBarMenuItems(values = item,
                isSelected = selectedMenuIndex == index
            ) {
                selectedMenuIndex = index
            }
        }
    }
}
@Composable
fun BottomBarMenuItems(values: BottomBarItemProperties,
                       isSelected: Boolean = false,
                       selectColor: Color = ButtonBlue,
                       selectTextColor: Color = Color.White,
                       unselectTextColor: Color = AquaBlue,
                       onClick: () -> Unit
) {
    Column(horizontalAlignment = Alignment.CenterHorizontally,
    verticalArrangement = Arrangement.Center,
    modifier = Modifier.clickable { onClick() }
    ) {
        Box(contentAlignment = Alignment.Center,
            modifier = Modifier
                .clip(RoundedCornerShape(10.dp))
                .background(if (isSelected) ButtonBlue else Color.Transparent)
                .padding(10.dp)
        ){
            Icon(painter = painterResource(id = values.iconNav) , contentDescription = values.iconName,
            tint = if (isSelected) selectTextColor else unselectTextColor,
            modifier = Modifier.size(20.dp))
        }
        Text(
            text = values.iconName,
            color = if (isSelected) selectTextColor else unselectTextColor)
    }
}





fun GreetingUpdate():String{
    val time = Calendar.getInstance()
    val timeOfDay = time.get(Calendar.HOUR_OF_DAY)
    return when (timeOfDay) {
        in 0..11  ->  "Morning"
        in 12..15 ->  "Afternoon"
        in 16..20 ->  "Evening"
        else ->  "Night"
    }
}
@Preview(showBackground = true)
@Composable
fun HomeScreenPreview() {
    MeditationComposeCampTheme {
        HomeScreen()
    }
}
